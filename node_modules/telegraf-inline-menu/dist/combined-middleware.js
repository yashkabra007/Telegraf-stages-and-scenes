"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class CombinedMiddleware {
    constructor(mainFunc, hiddenFunc) {
        this.mainFunc = mainFunc;
        this.hiddenFunc = hiddenFunc;
        this._only = [];
        this._hide = [];
        this._afterFunc = [];
    }
    addOnly(func) {
        this._only.push(func);
        return this;
    }
    addHide(func) {
        this._hide.push(func);
        return this;
    }
    addAfterFunc(func, runEvenWhenHidden = false) {
        this._afterFunc.push({
            func,
            runEvenWhenHidden
        });
        return this;
    }
    middleware() {
        return (ctx, next) => __awaiter(this, void 0, void 0, function* () {
            const onlyResults = yield Promise.all(this._only.map((o) => __awaiter(this, void 0, void 0, function* () { return o(ctx); })));
            if (onlyResults.some(o => o !== true)) {
                return next(ctx);
            }
            const hiddenResults = yield Promise.all(this._hide.map((o) => __awaiter(this, void 0, void 0, function* () { return o(ctx); })));
            const isHidden = hiddenResults.some(o => o === true);
            if (isHidden) {
                if (this.hiddenFunc) {
                    yield this.hiddenFunc(ctx, next);
                }
                else {
                    yield next(ctx);
                }
            }
            else {
                yield this.mainFunc(ctx, next);
            }
            yield Promise.all(this._afterFunc
                .filter(o => o.runEvenWhenHidden || !isHidden)
                .map((o) => __awaiter(this, void 0, void 0, function* () { return o.func(ctx); })));
        });
    }
}
exports.default = CombinedMiddleware;
//# sourceMappingURL=combined-middleware.js.map