"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const action_code_1 = __importDefault(require("../action-code"));
function buildKeyboardButton(buttonInfo, actionCodePrefix, ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        const { hide, text, action, url, switchToChat, switchToCurrentChat, root } = buttonInfo;
        if (hide) {
            const hideIt = yield hide(ctx);
            if (hideIt) {
                return undefined;
            }
        }
        const button = {
            text: typeof text === 'function' ? yield text(ctx) : text
        };
        if (action) {
            const thisActionResult = typeof action === 'function' ? yield action(ctx) : action;
            if (root) {
                button.callback_data = thisActionResult;
            }
            else {
                button.callback_data = new action_code_1.default(actionCodePrefix).concat(thisActionResult).getString();
            }
        }
        else if (url) {
            button.url = typeof url === 'function' ? yield url(ctx) : url;
        }
        else if (switchToChat) {
            button.switch_inline_query = typeof switchToChat === 'function' ? yield switchToChat(ctx) : switchToChat;
        }
        else if (switchToCurrentChat) {
            button.switch_inline_query_current_chat = typeof switchToCurrentChat === 'function' ? yield switchToCurrentChat(ctx) : switchToCurrentChat;
        }
        else {
            throw new Error('button was not completly intialized');
        }
        return button;
    });
}
exports.buildKeyboardButton = buildKeyboardButton;
//# sourceMappingURL=build-keyboard-button.js.map