"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const build_keyboard_button_1 = require("./build-keyboard-button");
function buildKeyboard(content, actionCodePrefix, ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        const resultButtons = yield Promise.all(content.map((row) => __awaiter(this, void 0, void 0, function* () {
            if (typeof row === 'function') {
                const innerKeyboard = yield row(ctx);
                return Promise.all(innerKeyboard.map((innerRow) => __awaiter(this, void 0, void 0, function* () { return buildKeyboardRow(innerRow, actionCodePrefix, ctx); })));
            }
            return [yield buildKeyboardRow(row, actionCodePrefix, ctx)];
        })));
        const resultButtonsFlatted = resultButtons
            // .flat(1) requires NodeJS 11 / ES2019. This would be nice but is to far away for now.
            .reduce((accumulator, currentValue) => accumulator.concat(currentValue), [])
            .filter(o => o.length > 0);
        return {
            inline_keyboard: resultButtonsFlatted
        };
    });
}
exports.buildKeyboard = buildKeyboard;
function buildKeyboardRow(row, actionCodePrefix, ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        const buttons = yield Promise.all(row.map((buttonInfo) => __awaiter(this, void 0, void 0, function* () { return build_keyboard_button_1.buildKeyboardButton(buttonInfo, actionCodePrefix, ctx); })));
        const withoutHidden = buttons
            .filter(o => o !== undefined);
        return withoutHidden;
    });
}
//# sourceMappingURL=build-keyboard.js.map