"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.emojiTrue = 'âœ…';
exports.emojiFalse = 'ðŸš«';
function prefixEmoji(text, prefix, options = {}, ...args) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!options.prefixTrue) {
            options.prefixTrue = exports.emojiTrue;
        }
        if (!options.prefixFalse) {
            options.prefixFalse = exports.emojiFalse;
        }
        const prefixResult = typeof prefix === 'function' ? yield prefix(...args) : prefix;
        const prefixContent = applyOptionsToPrefix(prefixResult, options);
        return prefixText(text, prefixContent, ...args);
    });
}
exports.prefixEmoji = prefixEmoji;
function applyOptionsToPrefix(prefix, options) {
    const { prefixFalse, prefixTrue, hideFalseEmoji, hideTrueEmoji } = options;
    if (prefix === true) {
        if (hideTrueEmoji) {
            return undefined;
        }
        return prefixTrue;
    }
    if (prefix === false) {
        if (hideFalseEmoji) {
            return undefined;
        }
        return prefixFalse;
    }
    return prefix;
}
function prefixText(text, prefix, ...args) {
    return __awaiter(this, void 0, void 0, function* () {
        const textResult = typeof text === 'function' ? yield text(...args) : text;
        const prefixResult = typeof prefix === 'function' ? yield prefix(...args) : prefix;
        if (!prefixResult) {
            return textResult;
        }
        return `${prefixResult} ${textResult}`;
    });
}
exports.prefixText = prefixText;
//# sourceMappingURL=prefix.js.map